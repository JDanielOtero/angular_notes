// ‚úÖ FUNCIONES EN TYPESCRIPT

{
    // ‚úÖ FUNCI√ìN TRADICIONAL
        // Recibe dos n√∫meros y retorna su suma como n√∫mero.
        function addNumbers(a: number, b: number): number {
            return a + b;                                       // ‚û°Ô∏è Retorna 3 si a = 1, b = 2
        }

    // ‚úÖ FUNCI√ìN FLECHA (ARROW FUNCTION)
        // Realiza la misma suma, pero retorna el resultado como string.
        // Usa template string para convertir el n√∫mero a texto
        const addNumbersArrow = (a: number, b: number): string => {
            return `${a + b}`;              
        };

    // ‚úÖ FUNCI√ìN CON PAR√ÅMETROS OPCIONALES Y VALORES POR DEFECTO
        // - 'secondNumber' es opcional
        // - 'base' tiene un valor por defecto (2)
        function multiply(firstNumber: number, secondNumber?: number, base: number = 2): number {
            return firstNumber * base;
        }

    // ‚úÖ LLAMADAS A LAS FUNCIONES
        const result: number = addNumbers(1, 2);           // ‚û°Ô∏è 3 (n√∫mero)
        const result2: string = addNumbersArrow(1, 2);     // ‚û°Ô∏è '3' (string)
        const multiplyResult1: number = multiply(5);       // ‚û°Ô∏è 10 (usa base=2)
        const multiplyResult2: number = multiply(3, 9, 4); // ‚û°Ô∏è 12 (3 * 4)

    // ‚úÖ Imprimir resultados en formato tabla para mejor visualizaci√≥n
        console.table({
            result,
            result2,
            multiplyResult1,
            multiplyResult2,
        });

    // Tambi√©n puedes imprimirlos individualmente si deseas ver m√°s detalle
        console.log('Suma tradicional (num):', result);
        console.log('Suma flecha (string):', result2);
        console.log('Multiplicaci√≥n con base por defecto:', multiplyResult1);
        console.log('Multiplicaci√≥n con base 4:', multiplyResult2);
}

// ‚úÖ FUNCIONES CON INTERFACES Y OBJETOS

{
    // üîπ Definimos una interfaz para personajes del juego
        interface Character {
            name: string;             // Nombre del personaje
            hp: number;               // Puntos de vida (Hit Points)
            showHp: () => void;       // M√©todo para mostrar los puntos de vida actuales
        }

    // üîß Funci√≥n que "cura" al personaje aumentando sus puntos de vida
        const healCharacter = (character: Character, amount: number): void => {
            character.hp += amount;
            console.log(`${character.name} ha sido curado por ${amount} puntos.`);
        };

    // üßç Creamos un personaje que cumple con la interfaz Character
        const strider: Character = {
            name: 'Strider',
            hp: 50,
            showHp() {
            console.log(`‚ù§Ô∏è ${this.name} tiene ${this.hp} puntos de vida.`);
            },
        };

    // ‚ñ∂Ô∏è Llamadas de prueba

        // Mostrar vida inicial
        strider.showHp(); // ‚û°Ô∏è ‚ù§Ô∏è Strider tiene 50 puntos de vida.

        // Curamos al personaje con 10 puntos
        healCharacter(strider, 10); // ‚û°Ô∏è Strider ha sido curado por 10 puntos.

        // Mostrar vida despu√©s de curar
        strider.showHp(); // ‚û°Ô∏è ‚ù§Ô∏è Strider tiene 60 puntos de vida.
}


export {};
