// ‚úÖ INTERFACES ANIDADAS EN TYPESCRIPT

// üî∏ Interfaz para representar una direcci√≥n postal
    interface Address {
        street: string;   // Calle
        country: string;  // Pa√≠s
        city: string;     // Ciudad
    }

    // üî∏ Interfaz principal que representa un superh√©roe
    interface SuperHero {
        name: string;               // Nombre del h√©roe
        age: number;                // Edad
        address: Address;           // Direcci√≥n (usa otra interfaz como tipo)
        showAddress: () => string;  // M√©todo que devuelve direcci√≥n formateada
    }


// ‚úÖ OBJETO QUE IMPLEMENTA LAS INTERFACES

    const superHeroe: SuperHero = {
        name: 'Spiderman',
        age: 30,
        address: {
            street: 'Main St',
            country: 'USA',
            city: 'New York',
        },
        showAddress() {            
            // Usamos `this` para acceder a las propiedades del propio objeto
            // Devolvemos una cadena con el nombre, ciudad y pa√≠s
            return this.name + ', ' + this.address.city + ', ' + this.address.country;
        }
    };


// ‚úÖ LLAMADA AL M√âTODO DEL OBJETO

    // üîπ Ejecutamos el m√©todo del objeto
    const addressInfo = superHeroe.showAddress();

    // üßæ Imprimimos la informaci√≥n de forma clara
    console.log('Direcci√≥n completa del h√©roe:');
    console.log(addressInfo); // ‚û°Ô∏è Spiderman lives in New York, USA

    // üßæ Mostramos el objeto como tabla
    console.table(superHeroe);

    // üîç Accedemos tambi√©n a propiedades individuales
    console.log('Pa√≠s:', superHeroe.address.country);     // ‚û°Ô∏è USA
    console.log('Ciudad:', superHeroe.address.city);      // ‚û°Ô∏è New York
    console.log('Calle:', superHeroe.address.street);     // ‚û°Ô∏è Main St


export {};
